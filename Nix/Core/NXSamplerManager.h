#pragma once
#include "BaseDefs/DX12.h"
#include <vector>
#include "NXInstance.h"
#include "NXCodeProcessHelper.h"

class NXSamplerManager : public NXInstance<NXSamplerManager>
{
public:
	NXSamplerManager() {}
	virtual ~NXSamplerManager() {}

	const D3D12_STATIC_SAMPLER_DESC& CreateIso(UINT slot, UINT space = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL, D3D12_FILTER filterMode = D3D12_FILTER_MIN_MAG_MIP_LINEAR, D3D12_TEXTURE_ADDRESS_MODE addrUVW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_NEVER, FLOAT mipLODBias = 0.0f, UINT maxAnisotropy = 1, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK, FLOAT minLOD = -D3D12_FLOAT32_MAX, FLOAT maxLOD = D3D12_FLOAT32_MAX);

	const D3D12_STATIC_SAMPLER_DESC& Create(UINT slot, UINT space = 0, D3D12_SHADER_VISIBILITY visibility = D3D12_SHADER_VISIBILITY_ALL, D3D12_FILTER filterMode = D3D12_FILTER_MIN_MAG_MIP_LINEAR, D3D12_TEXTURE_ADDRESS_MODE addrU = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addrV = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_TEXTURE_ADDRESS_MODE addrW = D3D12_TEXTURE_ADDRESS_MODE_WRAP, D3D12_COMPARISON_FUNC comparisonFunc = D3D12_COMPARISON_FUNC_NEVER, FLOAT mipLODBias = 0.0f, UINT maxAnisotropy = 1, D3D12_STATIC_BORDER_COLOR borderColor = D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK, FLOAT minLOD = -D3D12_FLOAT32_MAX, FLOAT maxLOD = D3D12_FLOAT32_MAX);

	const D3D12_STATIC_SAMPLER_DESC& Create(UINT slot, UINT space, D3D12_SHADER_VISIBILITY visibility, const NXMatDataSampler* samplerInfo);

private:
	bool IsSame(const D3D12_STATIC_SAMPLER_DESC& lhs, const D3D12_STATIC_SAMPLER_DESC& rhs);
	D3D12_TEXTURE_ADDRESS_MODE ToAddressMode(NXSamplerAddressMode address);
	D3D12_FILTER ToFilterMode(NXSamplerFilter filter);

private:
	std::vector<D3D12_STATIC_SAMPLER_DESC> m_samplerDescs;
};
